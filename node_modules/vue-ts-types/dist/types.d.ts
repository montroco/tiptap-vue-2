export interface PropOptions<T> {
    type?: PropType<T>;
    required?: boolean;
    default?: T | (() => T | null | undefined) | null | undefined;
    validator?(value: T): boolean;
}
export declare type PropType<T> = PropConstructor<T> | PropConstructor<T>[];
export declare type PropConstructor<T> = {
    (): T;
} | {
    new (...parameters: any[]): T & object;
};
export declare type RequiredPropOptions<T> = PropOptions<T> & {
    required: true;
};
export declare type DefaultPropOptions<T> = PropOptions<T> & {
    default: unknown;
};
export interface PropOptionsGenerator<T> {
    optional: DefaultPropOptions<T | undefined>;
    nullable: DefaultPropOptions<T | null>;
    withDefault: (defaultValue: OneOfDefaultType<T>) => DefaultPropOptions<T>;
    required: RequiredPropOptions<T>;
}
/** Allow simple values for primitive types, require generator function for complex types */
export declare type OneOfDefaultType<T> = T extends boolean | number | string | symbol | null | undefined ? T : (() => T);
export declare type Constructor = new (...parameters: any[]) => any;
